1. Where clause will apply filter row by row.
SELECT * FROM EMP WHERE SALARY > 10000;

2. Having works on aggregated data.
SELECT dept_id, avg(salary) FROM emp
GROUP BY dept_id
HAVING avg(salary) > 9500;

SELECT department_id, AVG(salary) FROM emp
WHERE salary > 10000
GROUP BY department_id
HAVING AVG(salary) > 15000;

3. CONVERT ROWS TO COLUMNS AND COLUMNS TO ROWS WITHOUT USING PIVOT FUNCTION
SELECT emp_id,
sum(CASE when salary_component_type = 'salary' then val end) as salary,
sum(CASE when salary_component_type = 'bonus' then val end) as bonus,
sum(CASE when salary_component_type = 'hike_percent' then val end) as hike_percent
FROM emp_compensation
GROUP BY emp_id;

4. Design another table as well
SELECT emp_id,
sum(CASE when salary_component_type = 'salary' then val end) as salary,
sum(CASE when salary_component_type = 'bonus' then val end) as bonus,
sum(CASE when salary_component_type = 'hike_percent' then val end) as hike_percent
into emp_compensation_pivot
FROM emp_compensation
GROUP BY emp_id;

5. Convert COLUMNS to ROWS

SELECT * FROM
(SELECT emp_id, 'salary' as salary_component_type, salary as val FROM emp_compensation_pivot
UNION ALL
SELECT emp_id, 'bonus' as salary_component_type, bonus as val FROM emp_compensation_pivot
UNION ALL
SELECT emp_id, 'hike_percent' as salary_component_type, hike_percent as val FROM emp_compensation_pivot
)
ORDER BY emp_id

1. How to find duplicates in a given table?
SELECT emp_id, COUNT(*) FROM EMP GROUP BY emp_id HAVING COUNT(*) > 1;

2. How to delete duplicates
SELECT * FROM EMP
with CTE as (SELECT *, row_number() over (partition by emp_id order by emp_id) as rn FROM EMP)
DELETE FROM CTE where rn > 1;

3. Difference btwn UNION AND UNION ALL
Union will give distinct/ unique values if we combine two tables. Whereas UNION ALL will completely combine both the tables as it is.

SELECT manager_id FROM EMPLOYEE
UNION
SELECT manager_id FROM EMPLOYEE

SELECT manager_id FROM EMPLOYEE
UNION ALL
SELECT manager_id FROM EMPLOYEE

4. RANK, DENSE_RANK, ROW_NUMBER
RANK will skip the next available ranking value
whereas DENSE_RANK would still use the next chronological ranking value
ROW_NUMBER() will give running number value

SELECT EMP_ID, DEPT_NAME, EMP_NAME
RANK() OVER(ORDER BY salary DESC) as RNK,
DENSE_RANK() OVER(ORDER BY salary DESC) as dense_rnk,
ROW_NUM() OVER(order by SALARY DESC) as rn
FROM EMP

NOTE: If you want rank department wise then
SELECT EMP_ID, DEPT_NAME, EMP_NAME
RANK() OVER(PARTITION BY dept_id ORDER BY salary DESC) as RNK,
DENSE_RANK() OVER(PARTITION BY dept_id ORDER BY salary DESC) as dense_rnk,
ROW_NUM() OVER(PARTITION BY dept_id order by SALARY DESC) as rn
FROM EMP

Interview Question: Highest salary in each department

SELECT * FROM
(SELECT EMP_ID, DEPT_NAME, EMP_NAME, salary
RANK() OVER(PARTITION BY dept_id ORDER BY salary DESC) as RNK FROM emp) a
WHERE rnk = 1;

5. Employees who are not present in department table.

SELECT * FROM emp WHERE department_id not in (SELECT dep_id FROM dept)

SELECT emp.*, dept.dept_id, dept.dep_name FROM emp
LEFT JOIN dept ON emp.department_id = dept.dep_id
WHERE dept.dep_name IS NULL;

6. Second highest salary in each department

SELECT * FROM (SELECT emp.*, DENSE_RANK() OVER(PARTITION BY department_name ORDER BY salary DESC) as rn FROM EMP) a 
WHERE rn = 2;

7. Find all transactions done by Shilpa

SELECT * FROM ORDERS WHERE customer_name = 'Shilpa';

SELECT * FROM ORDERS WHERE UPPER(customer_name) = 'SHILPA';

8. Give me records where employee_salary > manager_salary. Self Join (Table has emp_id, emp_name, deaprtment_id, salary, manager_id)

Self join is a regular join but the table is joined with itself

SELECT e.emp_id, e.emp_name, m.emp_name as MANAGER_NAME, e.salary, m.salary as MANAGER_SALARY
FROM emp e
INNER JOIN emp m
ON e.mananger_id = m.emp_id
WHERE e.salary > m.salary;

9. Joins


10. Update query to swap the gender
UPDATE orders
SET customer_gender = 
(CASE 
WHEN customer_gender = 'MALE' then 'FEMALE'
WHEN customer_gender = 'FEMALE' then 'MALE'
END)

11. How to create temporary table

with EMP as
(
SELECT 1 as emp_id, 1000 as emp_salary, 1 as dep_id
UNION ALL SELECT 2 as emp_id, 2000 as emp_salary, 2 as dep_id
UNION ALL SELECT 3 as emp_id, 3000 as emp_salary, 3 as dep_id
)

12. SELF JOIN
- insert into products VALUES 
(1, 'A'),
(2, 'B'),
(3, 'C'),
(4, 'D'),
(5, 'E');
- insert into colors values (1,'Blue'),(2,'Green'),(3,'Orange')
- insert into sizes values (1,'M'),(2,'L'),(3,'XL');
- create table transactions
(
order_id int,
product_name varchar(20),
color varchar(10),
size varchar(10),
amount int
);
insert into transactions values (1,'A','Blue','L',300),(2,'B','Blue','XL',150),(3,'B','Green','L',250),(4,'C','Blue','L',250),
(5,'E','Green','L',270),(6,'D','Orange','L',200),(7,'D','Green','M',250);

SELECT p.*, c.* FROM products p, colors c; (Altogether 15 records, each rec of product table joined with each record of color table)
SELECT product_name, color, size, sum(amount) as total_amount  FROM transactions
GROUP BY product_name, color, size;


PROBLEM: You need the combination of all the products sols, with amount. Show 0 or NULL amount as well

STEP 1: SELECT p.name, c.color, s.size FROM products p, colors c, sizes s; (All the combinations appear)
STEP 2:
with MASTER_DATA as (
SELECT p.name as product_name, c.color as color_name, s.size as size FROM products p, colors c, sizes s),
sales as (SELECT product_name, color, size, sum(amount) as total_amount  FROM transactions
GROUP BY product_name, color, size)
SELECT md.product_name, md.color_name, md.size, isnull(s.total_amount, 0) as total_amount FROM 
MASTER_DATA md LEFT JOIN sales s 
ON md.product_name = s.product_name AND md.color_name = s.color AND md.size = s.size
ORDER BY total_amount;

USE CASE2: Prepare large no of rows for performance testing
 
a. SELECT row_number() OVER(ORDER BY t.order_id) AS order_id, t.product_name, t.color, t.size, t.amount FROM transactions t, master..orders o;

b. SELECT * into TRANSACTION_TEST FROM TRANSACTIONS where 1=2; --(Same schema without data)

c. INSERT INTO transaction_test
   SELECT row_number() OVER(ORDER BY t.order_id) AS order_id, t.product_name, t.color, t.size, 
   t.amount FROM transactions t, master..orders o
   LIMIT 1000;
   
13. JOINS CONCEPT
INNER JOIN: The INNER JOIN keyword selects records that have matching values in both tables
ORDERS_UNIQUE: 5009 records
RETURNS_UNIQUE: 296 records
NON-RETURNED: 4713 records

a. Select all records which were returned state wise and with total sales
SELECT o.state, sum(o.sales) as SALES FROM ORDERS_UNIQUE ou INNER JOIN RETURNS_UNIQUE ru
ON ou.order_id = ru.order_id
GROUP BY ou.state;

b. Select all records which were NON-returned.
LEFT JOIN: The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). 
The result is 0 records from the right side, if there is no match.


SELECT ou.order_id, ru.order_id, ou.sales
FROM ORDERS_UNIQUE ou
LEFT JOIN RETURNS_UNIQUE ru 
ON ou.order_id = ru.order_id
WHERE ru.order_id IS NULL;

c. RIGHT JOIN
The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). 
The result is 0 records from the left side, if there is no match.

Give me all records which were returned
SELECT ou.ORDER_ID, ru.ORDER_ID, ou.sales
FROM ORDERS_UNIQUE ou
RIGHT JOIN RETURNS_UNIQUE ru
ON ou.ORDER_ID = ru.order_id;

d. FULL OUTER JOIN
The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.

SELECT coalesce(ou.order_id, ru.order_id) as order_final, ou.order_id, ru.order_id, sales
FROM ORDERS_UNIQUE ou
FULL OUTER JOIN RETURNS_UNIQUE ru 
ON ou.order_id = ru.order_id;

NULL cannoy br compared to another NULL.

14. Calculate MODE using sql
insert into mode values (1),(2),(2),(3),(3),(3),(3),(4),(5);  ---MODE = 3
(1),(2),(2),(3),(3),(4),(5) --- MODE = 2 and 3

a. USING CTE

WITH freq_cte as 
(SELECT id, count(*) FROM mode group by id)
SELECT * FROM freq_cte
where freq = (SELECT max(freq) FROM freq_cte);

b. USING RANK FUNCTION

with freq_cte as
(SELECT id, count(*) as freq FROM mode group by id)
SELECT *, RANK() OVER(ORDER BY freq DESC) as rn FROM freq_cte
















